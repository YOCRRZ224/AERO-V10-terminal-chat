import socket
import threading
import os
import sys
import time
import json 

# --- Configuration ---
HOST = '127.0.0.1' # Must match the server's HOST if it's set to '0.0.0.0', use the server's actual IP
PORT = 55555
BUFFER_SIZE = 1024 # Buffer size for sending/receiving network data

# --- Global Client Variables ---
client_socket = None 
nickname = None
user_color = "\033[0m" # Default reset color. Will be loaded from server.

# --- File Transfer State (Client-side) ---
is_receiving_file = False          
current_incoming_file_path = None  
bytes_received_for_file = 0        
expected_file_size = 0             
incoming_file_writer = None        
incoming_file_sender_nick = None   

# New: Threading Event for file transfer confirmation
file_transfer_ready_event = threading.Event()
expected_confirmation_filename = None # To store filename from server confirmation

# --- To-Do List State (Client-side) ---
# This is now just a local copy of what the server manages for display purposes
todo_list_local_copy = [] 

# --- ASCII Art Fonts (Example - for /big command) ---
ascii_fonts = {
    "standard": {
        "A": ["  /\\  ", " /  \\ ", "/____\\", "/    \\", "/    \\"], "B": ["##### ", "#    #", "##### ", "#    #", "##### "],
        "C": [" #####", "#     ", "#     ", "#     ", " #####"], "D": ["####  ", "#   # ", "#    #", "#   # ", "####  "],
        "E": ["######", "#     ", "##### ", "#     ", "######"], "F": ["######", "#     ", "##### ", "#     ", "##### "],
        "G": [" #####", "#     ", "# ### ", "#   # ", " #####"], "H": ["#    #", "#    #", "######", "#    #", "#    #"],
        "I": ["######", "  #   ", "  #   ", "  #   ", "######"], "J": ["     #", "     #", "     #", "#    #", " #### "],
        "K": ["#   # ", "#  #  ", "##    ", "#  #  ", "#   # "], "L": ["#     ", "#     ", "#     ", "#     ", "######"],
        "M": ["# # #", "## ##", "# # #", " # # ", " # #"], "N": ["#   #", "##  #", "# # #", "#  ##", "#   #"],
        "O": [" #### ", "#    #", "#    #", "#    #", " #### "], "P": ["##### ", "#    #", "##### ", "#     ", "#     "],
        "Q": [" #### ", "#    #", "# #  #", "#  # #", " ####Q"], "R": ["##### ", "#    #", "##### ", "#  #  ", "#   # "],
        "S": [" #####", "#     ", " #####", "      #", " #####"], "T": ["######", "  #   ", "  #   ", "  #   ", "  #   "],
        "U": ["#    #", "#    #", "#    #", "#    #", " #### "], "V": ["#    #", "#    #", "#    #", " #  # ", "  ##  "],
        "W": ["#    #", "#    #", "# ## #", "##  ##", "#    #"], "X": ["#    #", " #  # ", "  ##  ", " #  # ", "#    #"],
        "Y": ["#    #", " #  # ", "  ##  ", "  #   ", "  #   "], "Z": ["######", "    # ", "   #  ", "  #   ", "######"],
        "0": [" #### ", "#    #", "# ## #", "#    #", " #### "], "1": ["  #   ", " ##   ", "  #   ", "  #   ", "##### "],
        "2": [" #### ", "#    #", "   ## ", "  #   ", "######"], "3": [" #####", "      #", " #### ", "      #", " #####"],
        "4": ["#    #", "#    #", "######", "     #", "     #"], "5": ["######", "#     ", "##### ", "     #", " #####"],
        "6": [" #####", "#    #", "######", "#    #", " #####"], "7": ["######", "     #", "    # ", "   #  ", "  #   "],
        "8": [" #####", "#     #", " #####", "#     #", " #####"], "9": [" #####", "#    #", " #####", "     #", " #####"],
        "!": ["  #   ", "  #   ", "  #   ", "      ", "  #   "], "?": [" #####", "#     #", "   ###", "      ", "   #  "],
        ".": ["   .  "], " ": ["      ", "      ", "      ", "      ", "      "] # Space character definition
    },
}

# --- ANSI Color Codes (for highlighting and consistent client output) ---
COLOR_RESET = "\033[0m"
CLIENT_INFO_COLOR = "\033[33m"      # Yellow for client-side info/prompts
CLIENT_ERROR_COLOR = "\033[31m"     # Red for client-side errors
MENTION_HIGHLIGHT_BG = "\033[42m"   # Green background for mentions
ASCII_ART_COLOR = "\033[34m"       # Blue for ASCII art
TODO_DISPLAY_COLOR = "\033[95m"    # Bright Magenta for To-Do list local display


# --- Helper Function: Send Message (Plain Text) ---
def send_message(sock, message_str):
    """Sends a plain string message as bytes over the socket."""
    try:
        sock.send(message_str.encode('utf-8'))
    except Exception as e:
        print(f"{CLIENT_ERROR_COLOR}Error sending message: {e}{COLOR_RESET}")
        # Consider more robust error handling or exiting if client can't send

# --- Helper Function: Display Progress Bar ---
def print_progress_bar(prefix, current, total, bar_length=40):
    """Prints a dynamic CLI progress bar."""
    progress = (current / total) * 100
    filled_length = int(bar_length * progress / 100)
    bar = '#' * filled_length + '-' * (bar_length - filled_length)
    sys.stdout.write(f"\r{CLIENT_INFO_COLOR}{prefix}: [{bar}] {progress:.1f}% ({current}/{total} bytes){COLOR_RESET}")
    sys.stdout.flush()

# --- To-Do List Functions (Client-Side Display Only - Server Manages Data) ---
# These functions now only format and print the 'todo_list_local_copy' received from the server.
# They no longer interact with a local file.
def list_todos_client(filter_type='all'):
    """Lists tasks based on filter_type (all, pending, completed) from local copy."""
    if not todo_list_local_copy:
        print(f"{TODO_DISPLAY_COLOR}[TO-DO]: Your to-do list is empty.{COLOR_RESET}")
        return

    print(f"{TODO_DISPLAY_COLOR}--- Your To-Do List ({filter_type.capitalize()}) ---{COLOR_RESET}")
    found_tasks = False
    for todo in todo_list_local_copy:
        status = "✅" if todo['completed'] else "❌"
        if (filter_type == 'all' or
            (filter_type == 'pending' and not todo['completed']) or
            (filter_type == 'completed' and todo['completed'])):
            print(f"{TODO_DISPLAY_COLOR}[{todo['id']}] {status} {todo['task']}{COLOR_RESET}")
            found_tasks = True
    if not found_tasks:
        print(f"{TODO_DISPLAY_COLOR}No {filter_type} tasks found.{COLOR_RESET}")
    print(f"{TODO_DISPLAY_COLOR}---------------------------{COLOR_RESET}")

def todo_help_client():
    """Displays help for to-do commands."""
    print(f"{TODO_DISPLAY_COLOR}--- To-Do List Commands ---{COLOR_RESET}")
    print(f"{TODO_DISPLAY_COLOR}/todo add <task_description> - Add a new task.{COLOR_RESET}")
    print(f"{TODO_DISPLAY_COLOR}/todo list [all|pending|completed] - List tasks. Default is 'all'.{COLOR_RESET}")
    print(f"{TODO_DISPLAY_COLOR}/todo complete <task_id> - Mark a task as complete.{COLOR_RESET}")
    print(f"{TODO_DISPLAY_COLOR}/todo remove <task_id> - Remove a task.{COLOR_RESET}")
    print(f"{TODO_DISPLAY_COLOR}/todo help - Show this help message.{COLOR_RESET}")
    print(f"{TODO_DISPLAY_COLOR}---------------------------{COLOR_RESET}")

# --- Function to Receive Messages from Server ---
def receive():
    """Handles all incoming data from the server, including chat and file data."""
    global is_receiving_file, current_incoming_file_path, bytes_received_for_file, expected_file_size, incoming_file_writer, incoming_file_sender_nick, nickname, user_color, todo_list_local_copy, expected_confirmation_filename, file_transfer_ready_event

    while True:
        try:
            # --- High-priority: Handle incoming File Data Chunks ---
            if is_receiving_file and incoming_file_writer:
                bytes_to_read_now = min(BUFFER_SIZE, expected_file_size - bytes_received_for_file)
                
                if bytes_to_read_now <= 0:
                    pass 
                else:
                    file_data_chunk = client_socket.recv(bytes_to_read_now)
                    
                    if not file_data_chunk: 
                        print(f"\n{CLIENT_ERROR_COLOR}Server disconnected during file data transfer for '{current_incoming_file_path}'.{COLOR_RESET}")
                        if incoming_file_writer:
                            incoming_file_writer.close()
                            os.remove(current_incoming_file_path) 
                        is_receiving_file = False
                        print(f"{CLIENT_ERROR_COLOR}[FILE TRANSFER]: Transfer cancelled due to server disconnection.{COLOR_RESET}")
                        client_socket.close()
                        sys.exit() 
                    
                    incoming_file_writer.write(file_data_chunk)
                    bytes_received_for_file += len(file_data_chunk)
                    
                    print_progress_bar("Receiving", bytes_received_for_file, expected_file_size)
                    
                    if bytes_received_for_file >= expected_file_size:
                        incoming_file_writer.close()
                        is_receiving_file = False
                        sys.stdout.write('\n') 
                        print(f"{CLIENT_INFO_COLOR}[FILE TRANSFER]: File '{os.path.basename(current_incoming_file_path)}' from {incoming_file_sender_nick} received successfully to '{current_incoming_file_path}'!{COLOR_RESET}")
                        
                        current_incoming_file_path = None
                        incoming_file_writer = None
                        incoming_file_sender_nick = None
                    continue 

            # --- Default: Handle Regular Chat Messages and Server Commands ---
            message_bytes = client_socket.recv(BUFFER_SIZE)
            
            if not message_bytes: 
                print(f"{CLIENT_INFO_COLOR}Disconnected from server.{COLOR_RESET}")
                client_socket.close()
                sys.exit() 

            decoded_message = message_bytes.decode('utf-8').strip()

            # --- Handle Initial Profile Data from Server ---
            if decoded_message.startswith("YOUR_PROFILE_DATA|"):
                try:
                    profile_json_str = decoded_message.split('|', 1)[1]
                    profile_data = json.loads(profile_json_str)
                    
                    # Update client's local variables from profile
                    nickname = profile_data['nickname']
                    user_color = profile_data['color']
                    todo_list_local_copy = profile_data['todos'] # Update local to-do list copy
                    
                    print(f"{CLIENT_INFO_COLOR}Profile loaded: Nickname='{nickname}', Color='{user_color}', To-Do items={len(todo_list_local_copy)}{COLOR_RESET}")
                except json.JSONDecodeError as e:
                    print(f"{CLIENT_ERROR_COLOR}Error parsing profile data from server: {e} - {profile_json_str}{COLOR_RESET}")
                except Exception as e:
                    print(f"{CLIENT_ERROR_COLOR}Unexpected error processing profile data: {e}{COLOR_RESET}")
                continue # Do not print this message as a chat message
            
            # --- Handle FILE_READY_TO_SEND confirmation from server ---
            # This is specifically for the sending client to know they can start sending data
            elif _strip_ansi_codes(decoded_message).startswith("FILE_READY_TO_SEND "):
                confirmed_filename = _strip_ansi_codes(decoded_message).split(' ', 1)[1]
                print(f"{CLIENT_INFO_COLOR}Server confirmed: {confirmed_filename} is ready for transfer.{COLOR_RESET}")
                expected_confirmation_filename = confirmed_filename # Store for write thread verification
                file_transfer_ready_event.set() # Signal the write thread
                continue # Don't print this message again as it's an internal signal

            # --- Handle Mentions ---
            # Check for nickname mention, then strip ANSI codes for accurate check
            message_without_ansi = _strip_ansi_codes(decoded_message)
            if nickname and f"@{nickname}" in message_without_ansi:
                sys.stdout.write(f"\r{MENTION_HIGHLIGHT_BG}*** YOU WERE MENTIONED ***{COLOR_RESET}\n")
                sys.stdout.write(decoded_message + '\n') # Print original message with colors
                sys.stdout.flush()
            
            # --- Client shutdown messages (server-initiated) ---
            # These are critical error/disconnect messages, print plainly.
            elif decoded_message.endswith("You are banned from this server by IP address.") or \
                 decoded_message.endswith("You are banned from this server. Your profile is marked as banned.") or \
                 decoded_message.endswith("Nickname already taken! Please choose another.") or \
                 decoded_message.endswith("Server is shutting down... Goodbye!"):
                print(decoded_message)
                client_socket.close()
                sys.exit() 
            
            # --- Default: Print message as is (server sends with colors) ---
            else:
                print(decoded_message)

        except ConnectionResetError:
            print(f"{CLIENT_INFO_COLOR}Disconnected from server.{COLOR_RESET}")
            client_socket.close()
            sys.exit() 
        except Exception as e:
            print(f"{CLIENT_ERROR_COLOR}An unexpected error occurred in receive thread: {e}{COLOR_RESET}")
            client_socket.close()
            sys.exit()

# Helper to strip ANSI codes for accurate mention checking
def _strip_ansi_codes(s):
    """Strips ANSI escape codes from a string."""
    import re
    return re.sub(r'\x1b\[[0-9;]*m', '', s)

# --- Function to Convert Text to ASCII Art ---
def text_to_ascii_art(text, font_name="standard"):
    """Converts a given text string into ASCII art using predefined fonts."""
    text_upper = text.upper() 
    if font_name not in ascii_fonts:
        print(f"{CLIENT_ERROR_COLOR}Error: ASCII art font '{font_name}' not found. Using standard.{COLOR_RESET}")
        font_name = "standard"
    font = ascii_fonts[font_name]
    
    char_height = 0
    if font:
        for char_data in font.values():
            char_height = len(char_data)
            break
    if char_height == 0: 
        char_height = 5
        
    art_lines = [""] * char_height 
    
    for char in text_upper:
        if char in font:
            for i in range(char_height):
                art_lines[i] += font[char][i] + " " 
        elif char == ' ': 
            for i in range(char_height):
                art_lines[i] += "   " 
        else: 
            for i in range(char_height):
                art_lines[i] += "? " 
    return f"{ASCII_ART_COLOR}{'\n'.join(art_lines)}{COLOR_RESET}"


# --- Function to Write/Send Messages to Server ---
def write():
    """Handles user input from the console and sends it to the server."""
    global nickname, expected_confirmation_filename, file_transfer_ready_event
    while True:
        try:
            # Enhanced input prompt
            message = input(f"{user_color}{nickname}> {COLOR_RESET}")
            
            # --- Prevent sending commands/messages while receiving a file ---
            if is_receiving_file: 
                print(f"{CLIENT_ERROR_COLOR}Cannot send commands/messages while receiving another file. Please wait for current transfer to complete.{COLOR_RESET}")
                continue

            # --- Work Topic Commands (client-side checks for usage) ---
            if message.startswith('/newwork '):
                parts = message.split(' ', 1)
                if len(parts) == 2:
                    send_message(client_socket, message)
                else:
                    print(f"{CLIENT_ERROR_COLOR}Usage: /newwork <topic_name>{COLOR_RESET}")
            elif message.startswith('/work '):
                parts = message.split(' ', 2)
                if len(parts) == 3: 
                    send_message(client_socket, message)
                else:
                    print(f"{CLIENT_ERROR_COLOR}Usage: /work <topic_name> <message>{COLOR_RESET}")
            elif message == '/works':
                send_message(client_socket, message)

            # --- File Transfer Initiation (P2P via /sendfile) ---
            elif message.startswith('/sendfile '):
                parts = message.split(' ', 2)
                if len(parts) < 3:
                    print(f"{CLIENT_ERROR_COLOR}Usage: /sendfile <recipient_nickname> <path_to_file>{COLOR_RESET}")
                    continue
                
                recipient_nickname = parts[1]
                file_path_to_send = parts[2]

                if not os.path.exists(file_path_to_send):
                    print(f"{CLIENT_ERROR_COLOR}File '{file_path_to_send}' not found.{COLOR_RESET}")
                    continue
                
                file_size = os.path.getsize(file_path_to_send)
                filename = os.path.basename(file_path_to_send)

                if file_size == 0:
                    print(f"{CLIENT_ERROR_COLOR}Cannot send empty file.{COLOR_RESET}")
                    continue

                print(f"{CLIENT_INFO_COLOR}Initiating P2P file transfer to {recipient_nickname}: '{filename}' ({file_size} bytes)...{COLOR_RESET}")
                
                init_command = f"/sendfile {recipient_nickname} {filename}|{file_size}"
                send_message(client_socket, init_command)
                
                # --- Wait for confirmation from receive thread ---
                file_transfer_ready_event.clear() # Clear event before waiting
                
                if file_transfer_ready_event.wait(timeout=5): # Wait for up to 5 seconds
                    # Check if the confirmed filename matches the one we're sending
                    if expected_confirmation_filename == filename:
                        print(f"{CLIENT_INFO_COLOR}Server confirmed. Starting P2P file transfer...{COLOR_RESET}")
                    else:
                        print(f"{CLIENT_ERROR_COLOR}Server sent an unexpected file confirmation. Aborting file transfer.{COLOR_RESET}")
                        file_transfer_ready_event.clear()
                        expected_confirmation_filename = None
                        continue # Abort and go back to input prompt
                else:
                    print(f"{CLIENT_ERROR_COLOR}Server did not respond with file transfer confirmation in time. Aborting.{COLOR_RESET}")
                    file_transfer_ready_event.clear()
                    expected_confirmation_filename = None
                    continue # Abort and go back to input prompt
                
                # Reset event and filename after successful check for next transfer
                file_transfer_ready_event.clear()
                expected_confirmation_filename = None

                # --- Start sending raw file bytes (UNENCRYPTED) ---
                with open(file_path_to_send, 'rb') as f:
                    bytes_sent = 0
                    while bytes_sent < file_size:
                        bytes_read = f.read(BUFFER_SIZE)
                        if not bytes_read:
                            break 
                        
                        client_socket.sendall(bytes_read)
                        bytes_sent += len(bytes_read)
                        
                        print_progress_bar("Sending", bytes_sent, file_size)
                        
                        time.sleep(0.001) 

                sys.stdout.write('\n') 
                send_message(client_socket, f"/FILE_COMPLETE {filename}")
                print(f"{CLIENT_INFO_COLOR}Finished sending file '{filename}'.{COLOR_RESET}")
                # ADDED: Small delay after sending file complete message
                time.sleep(0.1) 


            # --- Broadcast File Transfer Initiation (via /sendallfile) ---
            elif message.startswith('/sendallfile '):
                parts = message.split(' ', 1) 
                if len(parts) < 2:
                    print(f"{CLIENT_ERROR_COLOR}Usage: /sendallfile <path_to_file>{COLOR_RESET}")
                    continue
                
                file_path_to_send = parts[1]

                if not os.path.exists(file_path_to_send):
                    print(f"{CLIENT_ERROR_COLOR}File '{file_path_to_send}' not found.{COLOR_RESET}")
                    continue
                
                file_size = os.path.getsize(file_path_to_send)
                filename = os.path.basename(file_path_to_send)

                if file_size == 0:
                    print(f"{CLIENT_ERROR_COLOR}Cannot send empty file.{COLOR_RESET}")
                    continue

                print(f"{CLIENT_INFO_COLOR}Initiating broadcast file transfer: '{filename}' ({file_size} bytes)...{COLOR_RESET}")
                
                init_command = f"/sendallfile {filename}|{file_size}"
                send_message(client_socket, init_command)
                
                # --- Wait for confirmation from receive thread ---
                file_transfer_ready_event.clear() # Clear event before waiting
                
                if file_transfer_ready_event.wait(timeout=5): # Wait for up to 5 seconds
                    # Check if the confirmed filename matches the one we're sending
                    if expected_confirmation_filename == filename:
                        print(f"{CLIENT_INFO_COLOR}Server confirmed. Starting broadcast file transfer...{COLOR_RESET}")
                    else:
                        print(f"{CLIENT_ERROR_COLOR}Server sent an unexpected file confirmation. Aborting broadcast file transfer.{COLOR_RESET}")
                        file_transfer_ready_event.clear()
                        expected_confirmation_filename = None
                        continue # Abort and go back to input prompt
                else:
                    print(f"{CLIENT_ERROR_COLOR}Server did not respond with broadcast file transfer confirmation in time. Aborting.{COLOR_RESET}")
                    file_transfer_ready_event.clear()
                    expected_confirmation_filename = None
                    continue # Abort and go back to input prompt
                
                # Reset event and filename after successful check for next transfer
                file_transfer_ready_event.clear()
                expected_confirmation_filename = None

                # --- Start sending raw file bytes (UNENCRYPTED) ---
                with open(file_path_to_send, 'rb') as f:
                    bytes_sent = 0
                    while bytes_sent < file_size:
                        bytes_read = f.read(BUFFER_SIZE)
                        if not bytes_read:
                            break 
                        
                        client_socket.sendall(bytes_read)
                        bytes_sent += len(bytes_read)
                        
                        print_progress_bar("Sending", bytes_sent, file_size)
                        
                        time.sleep(0.001) 

                sys.stdout.write('\n')
                send_message(client_socket, f"/FILE_COMPLETE {filename}")
                print(f"{CLIENT_INFO_COLOR}Finished sending broadcast file '{filename}'.{COLOR_RESET}")
                # ADDED: Small delay after sending file complete message
                time.sleep(0.1)

            # --- MODIFIED: To-Do List Commands (SEND TO SERVER) ---
            elif message.startswith('/todo'):
                # All /todo commands are now sent directly to the server
                # The server will handle the logic and send back appropriate responses
                send_message(client_socket, message)
            
            # --- ASCII Art Command ---
            elif message.startswith('/big '):
                text_to_convert = message[len('/big '):].strip() 
                if text_to_convert:
                    art_output = text_to_ascii_art(text_to_convert)
                    send_message(client_socket, art_output) 
                else:
                    print(f"{CLIENT_ERROR_COLOR}Usage: /big <text_to_convert>{COLOR_RESET}")

            # --- Other commands forwarded directly to server ---
            elif message.startswith('/away') or message == '/back' or message.startswith('/history') \
                 or message.startswith('/pm') or message.startswith('/color') \
                 or message.startswith('/users') or message.startswith('/addadmin') \
                 or message.startswith('/kick') or message.startswith('/ban') \
                 or message.startswith('/mute') or message.startswith('/unmute') \
                 or message.startswith('/announce') or message.startswith('/motd') \
                 or message == '/shutdown' or message == '/help': # New: /help
                send_message(client_socket, message) 

            # --- Regular Chat Message ---
            else:
                send_message(client_socket, message) 

        except Exception as e:
            print(f"{CLIENT_ERROR_COLOR}Error in write thread: {e}{COLOR_RESET}")
            client_socket.close()
            sys.exit() 

# --- Client Setup ---
client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
try:
    client_socket.connect((HOST, PORT))
except ConnectionRefusedError:
    print(f"{CLIENT_ERROR_COLOR}Connection refused: Server at {HOST}:{PORT} is not running or unreachable.{COLOR_RESET}")
    sys.exit() 
except Exception as e:
    print(f"{CLIENT_ERROR_COLOR}An error occurred while connecting: {e}{COLOR_RESET}")
    sys.exit()

# --- Initial Nickname Prompt (Client sends its choice to server) ---
# Server will load profile and use this nickname or update if different
initial_nickname_choice = input(f"{CLIENT_INFO_COLOR}Choose your nickname (or type 'default' to use previous for your IP): {COLOR_RESET}")
if not initial_nickname_choice:
    print(f"{CLIENT_ERROR_COLOR}Nickname cannot be empty. Exiting.{COLOR_RESET}")
    client_socket.close()
    sys.exit()

try:
    client_socket.send(initial_nickname_choice.encode('utf-8'))
except Exception as e:
    print(f"{CLIENT_ERROR_COLOR}Failed to send nickname: {e}{COLOR_RESET}")
    client_socket.close()
    sys.exit()

# --- Start Threads ---
receive_thread = threading.Thread(target=receive)
receive_thread.daemon = True 
receive_thread.start()

write_thread = threading.Thread(target=write)
write_thread.daemon = True
write_thread.start()

# Keep the main thread alive indefinitely.
while True:
    try:
        time.sleep(1)
        if not receive_thread.is_alive() or not write_thread.is_alive():
            print(f"{CLIENT_ERROR_COLOR}A communication thread has stopped. Exiting client.{COLOR_RESET}")
            break
    except KeyboardInterrupt:
        print(f"\n{CLIENT_INFO_COLOR}Exiting chat client gracefully.{COLOR_RESET}")
        break
    except Exception as e:
        print(f"{CLIENT_ERROR_COLOR}An error occurred in main thread: {e}{COLOR_RESET}")
        break

# Clean up before exiting
client_socket.close()
print(f"{CLIENT_INFO_COLOR}Client exiting.{COLOR_RESET}")